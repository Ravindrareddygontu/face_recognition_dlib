import numpy as np
import os
import cv2
from keras.models import Model
from keras.layers import Input, Flatten, Dense
from keras.preprocessing.image import ImageDataGenerator
from keras.optimizers import Adam
from keras_vggface.vggface import VGGFace

# Path to the directory containing the training and validation data
data_path = 'data'

# Dimensions of input images (assumes square images)
img_dim = 224

# Number of classes (assumes one directory per class)
num_classes = len(os.listdir(os.path.join(data_path, 'train')))

# Initialize VGGFace model
vggface = VGGFace(model='vgg16', include_top=False, input_shape=(img_dim, img_dim, 3))


# Freeze all layers of VGGFace except the last 7
for layer in vggface.layers:
    layer.trainable = False

# Add custom layers on top of VGGFace
x = vggface.output

x = Flatten()(x)
x = Dense(512, activation='relu')(x)
x = Dense(num_classes, activation='softmax')(x)

model = Model(inputs=vggface.input, outputs=x)


# Compile the model
model.compile(optimizer=Adam(lr=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])

# Generate training and validation data using data augmentation
train_datagen = ImageDataGenerator(
    rescale=1./255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True)

val_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    os.path.join(data_path, 'train'),
    target_size=(img_dim, img_dim),
    batch_size=32,
    class_mode='categorical',
    )

validation_generator = val_datagen.flow_from_directory(
    os.path.join(data_path, 'val'),
    target_size=(img_dim, img_dim),
    batch_size=32,
    class_mode='categorical',
    )

# Train the model
model.fit(
    train_generator,
    steps_per_epoch=len(train_generator),
    epochs=20,
    validation_data=validation_generator,
    validation_steps=len(validation_generator))

model.save('face.h5')
# Evaluate the model on the test set
test_datagen = ImageDataGenerator(rescale=1./255)
test_generator = test_datagen.flow_from_directory(
    os.path.join(data_path, 'val'),
    target_size=(img_dim, img_dim),
    batch_size=25,
    class_mode='categorical')

score = model.evaluate(test_generator, verbose=0)
print('Test accuracy:', score)
